generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model address {
  id            String     @id @db.Char(36)
  zip_code      String?    @db.VarChar(20)
  street_name   String?    @db.VarChar(255)
  street_number String?    @db.VarChar(255)
  complement    String?    @db.VarChar(255)
  city          String?    @db.VarChar(255)
  state         String?    @db.VarChar(255)
  country       String?    @db.VarChar(255)
  customer      customer[]
  user          user[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model customer {
  id                   String                 @id @db.Char(36)
  user_id              String                 @db.Char(36)
  address_id           String                 @db.Char(36)
  created              String                 @db.VarChar(20)
  updated              String?                @db.VarChar(20)
  picture              String?                @db.VarChar(255)
  birthday             String?                @db.VarChar(10)
  full_name            String?                @db.VarChar(255)
  phone                String?                @db.VarChar(30)
  person_type          String?                @db.VarChar(2)
  document_type        String?                @db.VarChar(10)
  document_number      String?                @db.VarChar(255)
  email                String?                @db.VarChar(255)
  active               Int?                   @db.TinyInt
  favorite             Int?                   @db.TinyInt
  address              address                @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_address")
  user                 user                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_user")
  product              product[]
  product_waiting_list product_waiting_list[]

  @@index([address_id], map: "fk_customer_address")
  @@index([user_id], map: "fk_customer_user")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model product {
  id                   String                 @id @db.Char(36)
  user_id              String                 @db.Char(36)
  seller_id            String?                @db.Char(36)
  code                 String?                @db.Char(36)
  created              String                 @db.VarChar(20)
  updated              String?                @db.VarChar(20)
  title                String                 @db.VarChar(255)
  description          Bytes?                 @db.Blob
  categories           String?                @db.VarChar(255)
  price                BigInt?
  status               String                 @default("AVAILABLE") @db.VarChar(255)
  customer             customer?              @relation(fields: [seller_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_seller")
  user                 user                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_user")
  product_waiting_list product_waiting_list[]

  @@unique([code, user_id], map: "un_product_code")
  @@index([seller_id], map: "fk_product_seller")
  @@index([user_id], map: "fk_product_user")
}

model product_waiting_list {
  id          BigInt   @id @default(autoincrement())
  product_id  String   @db.Char(36)
  customer_id String   @db.Char(36)
  created     String   @db.VarChar(20)
  customer    customer @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_waiting_list_customer")
  product     product  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_product_waiting_list_product")

  @@index([customer_id], map: "fk_product_waiting_list_customer")
  @@index([product_id], map: "fk_product_waiting_list_product")
}

model user {
  id         String       @id @db.Char(36)
  address_id String?      @db.Char(36)
  user_name  String       @db.VarChar(255)
  full_name  String       @db.VarChar(255)
  email      String       @db.VarChar(255)
  phone      String?      @db.VarChar(255)
  birthday   String?      @db.VarChar(255)
  password   String       @db.VarChar(255)
  customer   customer[]
  product    product[]
  address    address?     @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_address")
  user_token user_token[]

  @@index([address_id], map: "fk_user_address")
}

model user_token {
  id         String @id @db.Char(36)
  user_id    String @db.Char(36)
  date_time  String @db.VarChar(20)
  expiration String @db.VarChar(20)
  token      String @db.Char(36)
  user       user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_token_user")

  @@index([user_id], map: "fk_user_token_user")
}
